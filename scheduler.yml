# .github/workflows/scheduler.yml

name: YourDailyPulse Job Scheduler

on:
    # 0: This is a field for minutes. A value of 0 means "at the zeroth minute".
    # *: This is a field for hours. An asterisk (*) means "every hour".
    # *: Field for the day of the month ("every day").
    # *: Field for the month ("every month").
    # *: Field for the day of the week ("every day of the week").
    # Runs the workflow every 60 minutes.
    # Run this task every time it is the zeroth minute of every hour, every day. 01:00, 02:00, 03:00.."
  schedule:
    - cron: '0 * * * *'
  
  # Allows manual triggering of workflow from GitHub UI for testing purposes.
  workflow_dispatch:

jobs:
  run-dispatcher:
    runs-on: ubuntu-latest
    
    steps:
      - name: 1. Checkout repository code
        uses: actions/checkout@v4

      - name: 2. Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 3. Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 4. Configure Google Service Account (Robust Method)
        uses: 'google-github-actions/auth@v2'
        id: auth
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
          
      - name: 5. Run the dispatcher script
        env:
          # --- Secrets (from GitHub repository settings) ---
          GOOGLE_APPLICATION_CREDENTIALS: ${{ steps.auth.outputs.credentials_file_path }}
          GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          OPENWEATHER_API_KEY: ${{ secrets.OPENWEATHER_API_KEY }}
          UNSPLASH_ACCESS_KEY: ${{ secrets.UNSPLASH_ACCESS_KEY }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
          CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
          CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
          
          # --- Configuration Variables (hard-coded here) ---
          GROQ_MODEL: 'openai/gpt-oss-120b'
          # Set to 'DEBUG' for detailed diagnostics, 'INFO' for normal production.
          LOG_LEVEL: 'DEBUG' 
          TZ: 'Europe/Bratislava'
          
        run: python trigger_jobs.py